import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
dotenv.config();

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå ERRO: Vari√°veis de ambiente VITE_SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY s√£o obrigat√≥rias');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

// Lista de tabelas conhecidas do projeto
const knownTables = [
  '001_perfis', '002_usuarios', '003_processos', '004_riscos', '005_acoes',
  '006_indicadores', '007_categorias', '008_subcategorias', '009_tipos_risco',
  '010_niveis_risco', '011_status_risco', '012_frequencias', '013_impactos',
  '014_probabilidades', '015_controles', '016_avaliacoes', '017_matriz_riscos'
];

async function checkRLSAndPolicies() {
  console.log('üîí VERIFICA√á√ÉO DETALHADA - RLS E POL√çTICAS');
  console.log('=' .repeat(50));
  
  const issues = {
    info: [],
    warnings: [],
    errors: []
  };

  try {
    // 1. Verificar quais tabelas existem realmente
    console.log('\nüìã 1. Verificando tabelas existentes...');
    
    const existingTables = [];
    for (const tableName of knownTables) {
      try {
        const { data, error } = await supabase
          .from(tableName)
          .select('*')
          .limit(1);
        
        if (!error) {
          existingTables.push(tableName);
          console.log(`‚úÖ Tabela encontrada: ${tableName}`);
        } else {
          console.log(`‚ùå Tabela n√£o encontrada: ${tableName}`);
        }
      } catch (error) {
        console.log(`‚ùå Erro ao verificar tabela ${tableName}:`, error.message);
      }
    }
    
    console.log(`\nüìä Total de tabelas existentes: ${existingTables.length}/${knownTables.length}`);
    
    if (existingTables.length === 0) {
      issues.errors.push({
        type: 'NO_TABLES_FOUND',
        severity: 'ERROR',
        description: 'Nenhuma tabela foi encontrada no banco de dados',
        recommendation: 'Verificar se as migra√ß√µes foram executadas corretamente'
      });
      return issues;
    }

    // 2. Verificar acesso p√∫blico (role anon) para cada tabela
    console.log('\nüåê 2. Verificando acesso p√∫blico (role anon)...');
    
    const anonClient = createClient(supabaseUrl, process.env.VITE_SUPABASE_ANON_KEY);
    const publiclyAccessibleTables = [];
    
    for (const tableName of existingTables) {
      try {
        const { data, error } = await anonClient
          .from(tableName)
          .select('*')
          .limit(1);
        
        if (!error) {
          publiclyAccessibleTables.push(tableName);
          console.log(`‚ö†Ô∏è Tabela ${tableName}: ACESS√çVEL PUBLICAMENTE`);
          
          issues.warnings.push({
            type: 'PUBLIC_TABLE_ACCESS',
            severity: 'WARNING',
            table: tableName,
            description: `Tabela "${tableName}" est√° acess√≠vel publicamente (sem autentica√ß√£o)`,
            recommendation: 'Implementar RLS ou remover permiss√µes do role anon se n√£o for necess√°rio acesso p√∫blico'
          });
        } else {
          console.log(`‚úÖ Tabela ${tableName}: PROTEGIDA (acesso negado para anon)`);
        }
      } catch (error) {
        console.log(`‚úÖ Tabela ${tableName}: PROTEGIDA (erro: ${error.message})`);
      }
    }
    
    // 3. Verificar se h√° dados sens√≠veis expostos publicamente
    console.log('\nüîç 3. Verificando exposi√ß√£o de dados sens√≠veis...');
    
    const sensitiveKeywords = ['password', 'senha', 'token', 'secret', 'key', 'hash', 'cpf', 'cnpj', 'email'];
    
    for (const tableName of publiclyAccessibleTables) {
      try {
        const { data, error } = await anonClient
          .from(tableName)
          .select('*')
          .limit(1);
        
        if (data && data.length > 0) {
          const columns = Object.keys(data[0]);
          const sensitiveColumns = columns.filter(col => 
            sensitiveKeywords.some(keyword => 
              col.toLowerCase().includes(keyword)
            )
          );
          
          if (sensitiveColumns.length > 0) {
            issues.errors.push({
              type: 'SENSITIVE_DATA_EXPOSED',
              severity: 'ERROR',
              table: tableName,
              columns: sensitiveColumns,
              description: `Dados sens√≠veis expostos publicamente na tabela "${tableName}": ${sensitiveColumns.join(', ')}`,
              recommendation: 'URGENTE: Implementar RLS ou remover acesso p√∫blico imediatamente'
            });
            console.log(`üö® CR√çTICO: Dados sens√≠veis expostos em ${tableName}: ${sensitiveColumns.join(', ')}`);
          }
          
          // Verificar se h√° dados reais expostos
          const sampleData = data[0];
          const nonNullFields = Object.entries(sampleData)
            .filter(([key, value]) => value !== null && value !== '')
            .map(([key]) => key);
          
          if (nonNullFields.length > 2) { // Mais que id e created_at
            issues.warnings.push({
              type: 'DATA_EXPOSURE',
              severity: 'WARNING',
              table: tableName,
              description: `Tabela "${tableName}" exp√µe dados reais publicamente (${nonNullFields.length} campos com dados)`,
              recommendation: 'Avaliar se a exposi√ß√£o p√∫blica destes dados √© necess√°ria'
            });
          }
        }
      } catch (error) {
        console.log(`‚ùå Erro ao verificar dados sens√≠veis em ${tableName}:`, error.message);
      }
    }
    
    // 4. Verificar tentativas de opera√ß√µes de escrita como anon
    console.log('\n‚úèÔ∏è 4. Verificando prote√ß√£o contra escrita p√∫blica...');
    
    for (const tableName of existingTables.slice(0, 3)) { // Testar apenas algumas tabelas
      try {
        // Tentar inserir dados como anon
        const { data, error } = await anonClient
          .from(tableName)
          .insert({ test_field: 'test_value' })
          .select();
        
        if (!error) {
          issues.errors.push({
            type: 'PUBLIC_WRITE_ACCESS',
            severity: 'ERROR',
            table: tableName,
            description: `Tabela "${tableName}" permite inser√ß√£o de dados por usu√°rios n√£o autenticados`,
            recommendation: 'CR√çTICO: Implementar RLS para prevenir inser√ß√µes n√£o autorizadas'
          });
          console.log(`üö® CR√çTICO: Escrita p√∫blica permitida em ${tableName}`);
          
          // Tentar remover o dado de teste
          try {
            await supabase.from(tableName).delete().eq('test_field', 'test_value');
          } catch (cleanupError) {
            console.log(`‚ö†Ô∏è N√£o foi poss√≠vel remover dado de teste de ${tableName}`);
          }
        } else {
          console.log(`‚úÖ Tabela ${tableName}: Protegida contra escrita p√∫blica`);
        }
      } catch (error) {
        console.log(`‚úÖ Tabela ${tableName}: Protegida (erro: ${error.message})`);
      }
    }
    
    // 5. Verificar configura√ß√µes de autentica√ß√£o
    console.log('\nüîê 5. Verificando configura√ß√µes de autentica√ß√£o...');
    
    // Tentar opera√ß√µes que requerem autentica√ß√£o
    try {
      const { data: user, error: userError } = await anonClient.auth.getUser();
      
      if (!user || !user.user) {
        console.log('‚úÖ Usu√°rio n√£o autenticado corretamente identificado');
        issues.info.push({
          type: 'AUTH_STATE_CORRECT',
          severity: 'INFO',
          description: 'Estado de autentica√ß√£o est√° sendo gerenciado corretamente',
          recommendation: 'Continuar monitorando sess√µes de usu√°rio'
        });
      }
    } catch (error) {
      console.log('‚úÖ Sistema de autentica√ß√£o funcionando:', error.message);
    }
    
    // 6. Verificar pol√≠ticas de senha (tentativa com senha fraca)
    console.log('\nüîë 6. Testando pol√≠ticas de senha...');
    
    const weakPasswords = ['123', '123456', 'password', 'admin'];
    let weakPasswordAccepted = false;
    
    for (const weakPass of weakPasswords) {
      try {
        const { data, error } = await anonClient.auth.signUp({
          email: `[MASKED_TEST_EMAIL]`,
          password: '[MASKED_WEAK_PASSWORD]'
        });
        
        if (!error) {
          weakPasswordAccepted = true;
          issues.warnings.push({
            type: 'WEAK_PASSWORD_POLICY',
            severity: 'WARNING',
            description: `Senha fraca "[MASKED]" foi aceita pelo sistema`,
            recommendation: 'Implementar pol√≠tica de senha mais rigorosa'
          });
          break;
        }
      } catch (error) {
        // Senha rejeitada - isso √© bom
      }
    }
    
    if (!weakPasswordAccepted) {
      console.log('‚úÖ Pol√≠ticas de senha est√£o funcionando');
      issues.info.push({
        type: 'STRONG_PASSWORD_POLICY',
        severity: 'INFO',
        description: 'Pol√≠ticas de senha forte est√£o ativas',
        recommendation: 'Manter monitoramento das tentativas de registro'
      });
    }
    
    // 7. Resumo de seguran√ßa por tabela
    console.log('\nüìä 7. Resumo de seguran√ßa por tabela...');
    
    for (const tableName of existingTables) {
      const tableIssues = issues.warnings.filter(issue => issue.table === tableName).length +
                         issues.errors.filter(issue => issue.table === tableName).length;
      
      if (tableIssues === 0) {
        console.log(`‚úÖ ${tableName}: Sem issues de seguran√ßa detectadas`);
      } else {
        console.log(`‚ö†Ô∏è ${tableName}: ${tableIssues} issue(s) de seguran√ßa`);
      }
    }

  } catch (error) {
    console.error('‚ùå Erro geral na verifica√ß√£o:', error.message);
    issues.errors.push({
      type: 'VERIFICATION_ERROR',
      severity: 'ERROR',
      description: `Erro durante a verifica√ß√£o: ${error.message}`,
      recommendation: 'Verificar conectividade e permiss√µes do Supabase'
    });
  }

  // Relat√≥rio final
  console.log('\n' + '='.repeat(50));
  console.log('üìä RELAT√ìRIO FINAL - RLS E POL√çTICAS');
  console.log('='.repeat(50));
  
  console.log(`\nüî¥ ERRORS (${issues.errors.length}):`);
  issues.errors.forEach((issue, index) => {
    console.log(`${index + 1}. [${issue.type}] ${issue.description}`);
    console.log(`   üí° Recomenda√ß√£o: ${issue.recommendation}`);
    if (issue.table) console.log(`   üìã Tabela: ${issue.table}`);
    if (issue.columns) console.log(`   üè∑Ô∏è Colunas: ${issue.columns.join(', ')}`);
    console.log('');
  });
  
  console.log(`\n‚ö†Ô∏è WARNINGS (${issues.warnings.length}):`);
  issues.warnings.forEach((issue, index) => {
    console.log(`${index + 1}. [${issue.type}] ${issue.description}`);
    console.log(`   üí° Recomenda√ß√£o: ${issue.recommendation}`);
    if (issue.table) console.log(`   üìã Tabela: ${issue.table}`);
    if (issue.columns) console.log(`   üè∑Ô∏è Colunas: ${issue.columns.join(', ')}`);
    console.log('');
  });
  
  console.log(`\n‚ÑπÔ∏è INFO (${issues.info.length}):`);
  issues.info.forEach((issue, index) => {
    console.log(`${index + 1}. [${issue.type}] ${issue.description}`);
    console.log(`   üí° Recomenda√ß√£o: ${issue.recommendation}`);
    console.log('');
  });
  
  console.log('\nüìà RESUMO GERAL:');
  console.log(`- Total de issues: ${issues.errors.length + issues.warnings.length + issues.info.length}`);
  console.log(`- Errors: ${issues.errors.length}`);
  console.log(`- Warnings: ${issues.warnings.length}`);
  console.log(`- Info: ${issues.info.length}`);
  
  // Classifica√ß√£o de risco
  if (issues.errors.length > 0) {
    console.log('\nüö® RISCO ALTO: Problemas cr√≠ticos de seguran√ßa encontrados!');
    console.log('   A√ß√£o requerida: Corrigir imediatamente os erros listados.');
  } else if (issues.warnings.length > 3) {
    console.log('\n‚ö†Ô∏è RISCO M√âDIO: V√°rias melhorias de seguran√ßa recomendadas.');
    console.log('   A√ß√£o requerida: Revisar e implementar as recomenda√ß√µes.');
  } else if (issues.warnings.length > 0) {
    console.log('\nüü° RISCO BAIXO: Algumas melhorias de seguran√ßa recomendadas.');
    console.log('   A√ß√£o requerida: Considerar implementar as melhorias quando poss√≠vel.');
  } else {
    console.log('\n‚úÖ RISCO M√çNIMO: Configura√ß√£o de seguran√ßa est√° adequada!');
    console.log('   A√ß√£o requerida: Manter monitoramento regular.');
  }
  
  return issues;
}

// Executar verifica√ß√£o
checkRLSAndPolicies().catch(console.error);