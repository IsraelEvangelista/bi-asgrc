import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
dotenv.config();

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFodHltYXFpaXpmZXJ1bXhnaHlqIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NjcyNzE4MiwiZXhwIjoyMDcyMzAzMTgyfQ.YO4KBnwulf4Bom_J9cASnBsX6SXvtNVpK8P4YD_Dm6I';

const supabase = createClient(supabaseUrl, supabaseServiceKey);

// Lista de tabelas conhecidas do projeto
const knownTables = [
  '001_perfis', '002_usuarios', '003_processos', '004_riscos', '005_acoes',
  '006_indicadores', '007_categorias', '008_subcategorias', '009_tipos_risco',
  '010_niveis_risco', '011_status_risco', '012_frequencias', '013_impactos',
  '014_probabilidades', '015_controles', '016_avaliacoes', '017_matriz_riscos'
];

async function checkSecurityIssues() {
  console.log('üîç AUDITORIA DE SEGURAN√áA - SUPABASE SECURITY ADVISOR');
  console.log('=' .repeat(60));
  
  const issues = {
    info: [],
    warnings: [],
    errors: []
  };

  try {
    // 1. Verificar acesso √†s tabelas com role anon
    console.log('\nüìã 1. Verificando acesso com role ANON...');
    const anonClient = createClient(supabaseUrl, process.env.VITE_SUPABASE_ANON_KEY);
    
    let anonAccessCount = 0;
    let authAccessCount = 0;
    
    for (const tableName of knownTables) {
      try {
        // Teste com role anon
        const { data: anonData, error: anonError } = await anonClient
          .from(tableName)
          .select('*')
          .limit(1);
        
        if (!anonError) {
          anonAccessCount++;
          issues.warnings.push({
            type: 'ANON_TABLE_ACCESS',
            severity: 'WARNING',
            table: tableName,
            description: `Tabela "${tableName}" acess√≠vel por usu√°rios n√£o autenticados (role anon)`,
            recommendation: 'Verificar se o acesso p√∫blico √© necess√°rio ou restringir com RLS'
          });
        }
        
        // Teste com role authenticated (usando service key como proxy)
        const { data: authData, error: authError } = await supabase
          .from(tableName)
          .select('*')
          .limit(1);
        
        if (!authError) {
          authAccessCount++;
        }
        
      } catch (error) {
        console.log(`‚ùå Erro ao testar tabela ${tableName}:`, error.message);
      }
    }
    
    console.log(`‚úÖ Tabelas acess√≠veis por anon: ${anonAccessCount}/${knownTables.length}`);
    console.log(`‚úÖ Tabelas acess√≠veis por authenticated: ${authAccessCount}/${knownTables.length}`);
    
    if (anonAccessCount === 0 && authAccessCount === 0) {
      issues.errors.push({
        type: 'NO_TABLE_ACCESS',
        severity: 'ERROR',
        description: 'Nenhuma tabela acess√≠vel - poss√≠vel problema de permiss√µes',
        recommendation: 'Verificar configura√ß√µes de RLS e permiss√µes no Supabase'
      });
    }
    
    if (anonAccessCount > authAccessCount / 2) {
      issues.warnings.push({
        type: 'EXCESSIVE_ANON_ACCESS',
        severity: 'WARNING',
        description: `Muitas tabelas (${anonAccessCount}) acess√≠veis publicamente`,
        recommendation: 'Revisar necessidade de acesso p√∫blico e implementar RLS adequado'
      });
    }

    // 2. Verificar autentica√ß√£o b√°sica
    console.log('\nüîê 2. Verificando sistema de autentica√ß√£o...');
    
    try {
      // Tentar fazer login com credenciais inv√°lidas
      const { data: loginData, error: loginError } = await anonClient.auth.signInWithPassword({
        email: 'test@invalid.com',
        password: 'invalid'
      });
      
      if (loginError) {
        console.log('‚úÖ Sistema de autentica√ß√£o funcionando (rejeitou credenciais inv√°lidas)');
        issues.info.push({
          type: 'AUTH_WORKING',
          severity: 'INFO',
          description: 'Sistema de autentica√ß√£o est√° funcionando corretamente',
          recommendation: 'Continuar monitorando tentativas de login suspeitas'
        });
      } else {
        issues.errors.push({
          type: 'AUTH_BYPASS',
          severity: 'ERROR',
          description: 'Poss√≠vel falha na autentica√ß√£o - credenciais inv√°lidas aceitas',
          recommendation: 'Verificar configura√ß√µes de autentica√ß√£o imediatamente'
        });
      }
    } catch (error) {
      console.log('‚úÖ Sistema de autentica√ß√£o protegido:', error.message);
    }

    // 3. Verificar configura√ß√µes de email
    console.log('\nüìß 3. Verificando configura√ß√µes de email...');
    
    try {
      // Tentar registrar com email inv√°lido
      const { data: signupData, error: signupError } = await anonClient.auth.signUp({
        email: 'invalid-email',
        password: 'test123456'
      });
      
      if (signupError && signupError.message.includes('email')) {
        console.log('‚úÖ Valida√ß√£o de email funcionando');
        issues.info.push({
          type: 'EMAIL_VALIDATION_OK',
          severity: 'INFO',
          description: 'Valida√ß√£o de formato de email est√° funcionando',
          recommendation: 'Considerar implementar verifica√ß√£o de dom√≠nio se necess√°rio'
        });
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao testar valida√ß√£o de email:', error.message);
    }

    // 4. Verificar pol√≠ticas de senha
    console.log('\nüîë 4. Verificando pol√≠ticas de senha...');
    
    try {
      // Tentar registrar com senha fraca
      const { data: weakPassData, error: weakPassError } = await anonClient.auth.signUp({
        email: 'test@example.com',
        password: '123'
      });
      
      if (weakPassError && weakPassError.message.includes('password')) {
        console.log('‚úÖ Pol√≠tica de senha forte ativa');
        issues.info.push({
          type: 'STRONG_PASSWORD_POLICY',
          severity: 'INFO',
          description: 'Pol√≠tica de senha forte est√° ativa',
          recommendation: 'Considerar adicionar requisitos adicionais se necess√°rio'
        });
      } else if (!weakPassError) {
        issues.warnings.push({
          type: 'WEAK_PASSWORD_ALLOWED',
          severity: 'WARNING',
          description: 'Senhas fracas podem ser aceitas',
          recommendation: 'Implementar pol√≠tica de senha mais rigorosa'
        });
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao testar pol√≠tica de senha:', error.message);
    }

    // 5. Verificar rate limiting
    console.log('\n‚è±Ô∏è 5. Verificando rate limiting...');
    
    let rateLimitHit = false;
    for (let i = 0; i < 10; i++) {
      try {
        const { error } = await anonClient.auth.signInWithPassword({
          email: 'test@invalid.com',
          password: 'invalid'
        });
        
        if (error && error.message.includes('rate')) {
          rateLimitHit = true;
          break;
        }
      } catch (error) {
        if (error.message.includes('rate') || error.message.includes('limit')) {
          rateLimitHit = true;
          break;
        }
      }
      
      // Pequena pausa entre tentativas
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    if (rateLimitHit) {
      console.log('‚úÖ Rate limiting ativo');
      issues.info.push({
        type: 'RATE_LIMITING_ACTIVE',
        severity: 'INFO',
        description: 'Rate limiting est√° ativo para tentativas de login',
        recommendation: 'Monitorar logs para detectar ataques de for√ßa bruta'
      });
    } else {
      issues.warnings.push({
        type: 'NO_RATE_LIMITING',
        severity: 'WARNING',
        description: 'Rate limiting pode n√£o estar configurado adequadamente',
        recommendation: 'Configurar rate limiting para prevenir ataques de for√ßa bruta'
      });
    }

    // 6. Verificar exposi√ß√£o de dados sens√≠veis
    console.log('\nüîç 6. Verificando exposi√ß√£o de dados sens√≠veis...');
    
    const sensitiveFields = ['password', 'senha', 'token', 'secret', 'key', 'hash'];
    
    for (const tableName of knownTables.slice(0, 5)) { // Verificar apenas algumas tabelas
      try {
        const { data, error } = await anonClient
          .from(tableName)
          .select('*')
          .limit(1);
        
        if (data && data.length > 0) {
          const fields = Object.keys(data[0]);
          const exposedSensitiveFields = fields.filter(field => 
            sensitiveFields.some(sensitive => 
              field.toLowerCase().includes(sensitive)
            )
          );
          
          if (exposedSensitiveFields.length > 0) {
            issues.warnings.push({
              type: 'SENSITIVE_DATA_EXPOSED',
              severity: 'WARNING',
              table: tableName,
              fields: exposedSensitiveFields,
              description: `Campos sens√≠veis expostos na tabela "${tableName}": ${exposedSensitiveFields.join(', ')}`,
              recommendation: 'Remover campos sens√≠veis da sele√ß√£o p√∫blica ou implementar RLS'
            });
          }
        }
      } catch (error) {
        // Tabela protegida - isso √© bom
      }
    }

    // 7. Verificar configura√ß√µes de CORS
    console.log('\nüåê 7. Verificando configura√ß√µes de CORS...');
    
    issues.info.push({
      type: 'CORS_CHECK_MANUAL',
      severity: 'INFO',
      description: 'Configura√ß√µes de CORS devem ser verificadas manualmente no dashboard',
      recommendation: 'Verificar se apenas dom√≠nios autorizados podem acessar a API'
    });

    // 8. Verificar logs de auditoria
    console.log('\nüìä 8. Verificando disponibilidade de logs...');
    
    issues.info.push({
      type: 'AUDIT_LOGS_MANUAL',
      severity: 'INFO',
      description: 'Logs de auditoria devem ser verificados regularmente no dashboard',
      recommendation: 'Configurar alertas para atividades suspeitas e revisar logs semanalmente'
    });

  } catch (error) {
    console.error('‚ùå Erro geral na auditoria:', error.message);
    issues.errors.push({
      type: 'AUDIT_ERROR',
      severity: 'ERROR',
      description: `Erro durante a auditoria: ${error.message}`,
      recommendation: 'Verificar conectividade e permiss√µes do Supabase'
    });
  }

  // Relat√≥rio final
  console.log('\n' + '='.repeat(60));
  console.log('üìä RELAT√ìRIO FINAL - SECURITY ADVISOR ISSUES');
  console.log('='.repeat(60));
  
  console.log(`\nüî¥ ERRORS (${issues.errors.length}):`);
  issues.errors.forEach((issue, index) => {
    console.log(`${index + 1}. [${issue.type}] ${issue.description}`);
    console.log(`   üí° Recomenda√ß√£o: ${issue.recommendation}`);
    if (issue.table) console.log(`   üìã Tabela: ${issue.table}`);
    console.log('');
  });
  
  console.log(`\n‚ö†Ô∏è WARNINGS (${issues.warnings.length}):`);
  issues.warnings.forEach((issue, index) => {
    console.log(`${index + 1}. [${issue.type}] ${issue.description}`);
    console.log(`   üí° Recomenda√ß√£o: ${issue.recommendation}`);
    if (issue.table) console.log(`   üìã Tabela: ${issue.table}`);
    if (issue.fields) console.log(`   üè∑Ô∏è Campos: ${issue.fields.join(', ')}`);
    console.log('');
  });
  
  console.log(`\n‚ÑπÔ∏è INFO (${issues.info.length}):`);
  issues.info.forEach((issue, index) => {
    console.log(`${index + 1}. [${issue.type}] ${issue.description}`);
    console.log(`   üí° Recomenda√ß√£o: ${issue.recommendation}`);
    console.log('');
  });
  
  console.log('\nüìà RESUMO:');
  console.log(`- Total de issues: ${issues.errors.length + issues.warnings.length + issues.info.length}`);
  console.log(`- Errors: ${issues.errors.length}`);
  console.log(`- Warnings: ${issues.warnings.length}`);
  console.log(`- Info: ${issues.info.length}`);
  
  if (issues.errors.length === 0 && issues.warnings.length <= 2) {
    console.log('\n‚úÖ Configura√ß√£o de seguran√ßa est√° em bom estado!');
  } else if (issues.errors.length > 0) {
    console.log('\nüö® ATEN√á√ÉO: Problemas cr√≠ticos de seguran√ßa encontrados!');
  } else {
    console.log('\n‚ö†Ô∏è Algumas melhorias de seguran√ßa s√£o recomendadas.');
  }
  
  console.log('\nüîó Para verifica√ß√µes mais detalhadas, acesse:');
  console.log('   - Dashboard do Supabase > Settings > Security');
  console.log('   - Dashboard do Supabase > Authentication > Settings');
  console.log('   - Dashboard do Supabase > Database > Policies');
}

// Executar auditoria
checkSecurityIssues().catch(console.error);